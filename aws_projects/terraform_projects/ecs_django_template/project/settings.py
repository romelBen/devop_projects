"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'mp)a8$n(ek21#5s59m(7a2gg-e+1x26-xn^83)jk5y3vd5eq7i'

# SECURITY WARNING: don't run with debug turned on in production!
# Be aware: if deployed in production with True is a major security risk.
# Also, when set to False Django will NOT handle static files. Your production
# web server must handle this.
DEBUG = False   # Sent to production

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split()


# Application definition

INSTALLED_APPS = [
    'project.api',
    'project.posts',
#    'storages',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'project.middleware.FilterIPMiddleware', # Created a python script to allow health checks for http responses
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'project/theme/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
### Important: Once DEBUG is set to False, static files will need to be hosted
### in a supported service such as AWS S3.
STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL.strip('/'))
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'project/theme/css'),
    os.path.join(BASE_DIR, 'project/theme/js'),
    os.path.join(BASE_DIR, 'project/theme/static'),
]

### We need to use boto3 with django-storages to push the static files to S3
### This needs to be worked or the website will load with error 404 on http,
### css, and js.
"""
STATIC_S3 = os.getenv('STATIC_S3') == 'TRUE'

if STATIC_S3:
    # AWS Settings
    AWS_ACCESS_KEY          = os.getenv('AWS_ACCESS_KEY')
    AWS_SECRET_ACCESS_KEY   = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET      = os.getenv('AWS_STORAGE_BUCKET')
    AWS_DEFAULT_ACL         = "public-read"
    AWS_S3_CUSTOM_DOMAIN    = f'{AWS_STORAGE_BUCKET}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETER = {'CacheControl': 'max-age=86400'}
    # S3 Static Settings
    AWS_LOCATION            = 'static'
    STATIC_URL              = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE     = 'storages.backends.s3boto3.S3Boto3Storage'
else
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL.strip('/'))

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'project/theme/css'),
    os.path.join(BASE_DIR, 'project/theme/js'),
    os.path.join(BASE_DIR, 'project/theme/static'),
]
"""

LOGOUT_REDIRECT_URL = '/'

CANDIDATE_FIRST_NAME = os.getenv("CANDIDATE_FIRST_NAME")
CANDIDATE_LAST_NAME = os.getenv("CANDIDATE_LAST_NAME")