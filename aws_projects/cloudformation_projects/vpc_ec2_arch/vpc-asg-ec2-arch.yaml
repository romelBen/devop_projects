---

AWSTemplateFormatVersion: '2010-09-09'

Description: VPC architecture with ASG and EC2

Parameters:
  # Ownership
  Owner:
    Description: Enter Team or Individual Name Repsonsible for the stack
    Type: String
    Default: FirstName LastName
  Project:
    Description: Enter Project Name
    Type: String
    Default: Autoscaling Stack Creation
  DeleteAfter:
    Description: Enter date it's ok to Delete the Stack or 'Never' if meant to be persistent
    Type: String
    Default: 00/00/201x
  EC2KeyPair:
    Description: Select Key pair to Assign to EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  MinAutoScaleAccount:
    Description: Enter Minimum instance auto scale count
    Type: Number
    Default: '1'
  MaxAutoScaleCount:
    Description: Enter Maximum instance auto scale count
    Type: Number
    Default: '2'

  # Subnets
  VPCSubnetCidrBlock:
    Description: 10.0.0.0/16 = 10.0.0.0 - 10.0.255.255
    Type: String
    Default: 10.0.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  AvailabilityZone3:
    Type: String
    Default: c
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  # Public Cidr Blocks 1-3
  PublicSubnetCidrBlock1:
    Type: String
    Default: 10.0.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  PublicSubnetCidrBlock2:
    Type: String
    Default: 10.0.2.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  PublicSubnetCidrBlock3:
    Type: String
    Default: 10.0.3.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  # Private Cidr Blcoks 1-3
  PrivateSubnetCidrBlock1:
    Type: String
    Default: 10.0.4.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  PrivateSubnetCidrBlock2:
    Type: String
    Default: 10.0.5.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
  PrivateSubnetCidrBlock3:
    Type: String
    Default: 10.0.6.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'

  # Remote Access Network
  RemoteCidrForSecurityGroup:
    Description: CIDR Block for SG to grant access to Instances (i.e. 192.168.100.0/24)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.100.0/24
    AllowedPattern: '(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x
  
  # VPC setup with Security Group
  VPC:
    Description: Select VPC.
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: Public Subnet 1 to Deploy ELB to.
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: Public Subnet 2 to Deploy ELB to.
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3:
    Description: Public Subnet 3 to Deploy ELB to.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Description: Private Subnet 1 to Deploy Webapp Autoscaling Group to.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: Private Subnet 2 to Deploy Webapp Autoscaling Group to.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3:
    Description: Private Subnet 3 to Deploy Webapp Autoscaling Group to.
    Type: AWS::EC2::Subnet::Id
  InternalAccessSecurityGroup:
    Description: Security Group That Allows Bastion Host Access to Instances.
    Type: AWS::EC2::SecurityGroup::Id
  RDSAccessSecurityGroup:
    Description: Security Group That Instance Access to RDS Instances.
    Type: AWS::EC2::SecurityGroup::Id
  # EC2 Instance type
  AMI:
    Description: Enter AMI ID.
    Type: String
    Default: ami-00000000
  InstanceType:
    Description: Select Instance Type.
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  OsType:
    Description: Select OS Type of the AMI
    Type: String
    Default: rhel17
    AllowedValues:
    - amazon
    - centos6
    - centos7
    - rhel16
    - rhel17
    - ubuntu
    - windows
  AsgSnsTopicArn:
    Description: Enter Notification SNS topic ARN for Autoscaling Group
    Type: String
    Default: arn:aws:sns:us-east-1:000000000:asg-alerts

Mappings:
  bootstrap:
    amazon:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M status=progress'
      patch: 'echo ''ACTION: Patching'' && yum update -y --exclude=kernel*'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && yum install
        -y curl wget mlocate ca-certificates openssl vim'
    centos6:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M'
      patch: 'echo ''ACTION: Patching'' && yum update -y --exclude=kernel*'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && yum install
        -y curl wget mlocate ca-certificates openssl vim'
    centos7:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M status=progress'
      patch: 'echo ''ACTION: Patching'' && yum update -y --exclude=kernel*'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && yum install
        -y curl wget mlocate ca-certificates openssl vim'
    rhel6:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M'
      patch: 'echo ''ACTION: Patching'' && yum update -y --exclude=kernel*'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && yum install
        -y curl wget mlocate ca-certificates openssl vim'
    rhel7:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M status=progress'
      patch: 'echo ''ACTION: Patching'' && yum update -y --exclude=kernel*'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && yum install
        -y curl wget mlocate ca-certificates openssl vim'
    ubuntu:
      warmebs: 'echo ''ACTION: Performing EBS Warming'' && dd if=/dev/xvda of=/dev/xvda
        conv=notrunc bs=1M status=progress'
      patch: 'echo ''ACTION: Patching'' && apt-mark hold linux-image-generic linux-headers-generic
        && apt-get update && sleep 1 && apt-get upgrade -y && apt-mark unhold linux-image-generic
        linux-headers-generic'
      installpackages: 'echo ''ACTION: Installing Software Packages'' && apt-get update
        && sleep 1 && apt-get install -y curl wget vim ca-certificates openssl htop'
    windows:
      warmebs: 'echo ''ACTION: Performing EBS Warming'''
      patch: 'echo ''ACTION: Patching'''
      installpackages: 'echo ''ACTION: Installing Software Packages'''

Metadata:
  TemplateAuthor: 'Romel I. Benavides'
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Ownership
      Parameters:
        - Owner
        - Project
        - DeleteAfter
    -
      Label:
        default: Remote Access
      Parameters:
        - RemoteCidrForSecurityGroup

    -
      Label:
        default: Subnets
      Parameters:
        - VPCSubnetCidrBlock
        - PublicSubnetCidrBlock1
        - PublicSubnetCidrBlock2
        - PublicSubnetCidrBlock3
        - PrivateSubnetCidrBlock1
        - PrivateSubnetCidrBlock2
        - PrivateSubnetCidrBlock3
        - AvailabilityZone1
        - AvailabilityZone2
        - AvailabilityZone3

    ParameterLabels:
      Owner:
        default: Team or Individual Owner
      DeleteAfter:
        default: Delete After Date
      RemoteCidrForSecurityGroup:
        default: Network CIDR for SG
      VPCSubnetCidrBlock:
        default: VPC Subnet
      PublicSubnetCidrBlock1:
        default: Public Subnet 1
      PublicSubnetCidrBlock2:
        default: Public Subnet 2
      PublicSubnetCidrBlock3:
        default: Public Subnet 3
      PrivateSubnetCidrBlock1:
        default: Private Subnet 1
      PrivateSubnetCidrBlock2:
        default: Private Subnet 2
      PrivateSubnetCidrBlock3:
        default: Private Subnet 3
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      AvailabilityZone3:
        default: Availability Zone 3

Resources:
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  IamPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - "-instance-policy"
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          - ec2:Describe*
          - elasticloadbalancing:Describe*
          - autoscaling:Describe*
          - cloudwatch:*
          - logs:*
          - sns:*
          Resource: "*"
      Roles:
      - Ref: IamRole
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: IamRole
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - InstanceToElbSecurityGroup
    - IamInstanceProfile
    Properties:
      AssociatePublicIpAddress: 'false'
      IamInstanceProfile:
        Ref: IamInstanceProfile
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: InstanceToElbSecurityGroup
      - Ref: RDSAccessSecurityGroup
      - Ref: InternalAccessSecurityGroup
      - Ref: RemoteSecurityGroup
      ImageId:
        Ref: AMI
      KeyName:
        Ref: Ec2KeyPair
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: 'true'
          VolumeType: gp2
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |
              #!/bin/bash
            - Fn::FindInMap:
              - bootstrap
              - Ref: OsType
              - warmebs
            - |2+
            - Fn::FindInMap:
              - bootstrap
              - Ref: OsType
              - patch
            - |2+
            - Fn::FindInMap:
              - bootstrap
              - Ref: OsType
              - installpackages
            - |2+
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - LaunchConfiguration
    - ElasticLoadBalancer
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MinSize:
        Ref: MinAutoScaleCount
      MaxSize:
        Ref: MaxAutoScaleCount
      DesiredCapacity:
        Ref: MinAutoScaleCount
      HealthCheckType: EC2
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupMinSize
        - GroupMaxSize
      NotificationConfigurations:
      - TopicARN:
        Ref: AsgSnsTopicArn
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      VPCZoneIdentifier:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: 'true'
      - Key: Owner
        Value:
          Ref: Owner
        PropagateAtLaunch: 'true'
      - Key: Project
        Value:
          Ref: Project
        PropagateAtLaunch: 'true'
      - Key: DeleteAfter
        Value:
          Ref: DeleteAfter
        PropagateAtLaunch: 'true'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - AutoScalingGroup
    - ScaleUpPolicy
    Properties:
      AlarmDescription: Scale-up if CPU > 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - AutoScalingGroup
    - ScaleDownPolicy
    Properties:
      AlarmDescription: Scale-down if CPU < 30% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '30'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoScalingGroup
      ComparisonOperator: LessThanThreshold
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
    - AutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: '1'
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
    - AutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: 1800
      ScalingAdjustment: "-1"
  # VPC build
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCSubnetCidrBlock
      EnableDnsSupport: true
      EnbleDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az1' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az2' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone3 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock3
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az3' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [ !Ref 'AWS::StackName', '-public' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestionationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    
  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properities:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az1' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az2' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone3 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock3
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az3' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  PrivateSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InternalAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properities:
      GroupDescription: Instance to Instance Access in VPC
      VPCId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-instance-to-instance' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
  
  InternalAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: InternalAccessSecurityGroup
    Properties:
      GroupId: !Ref InternalAccessSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref InternalAccessSecurityGroup

  RemoteAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Access over VPN/Direct Connect
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-remote-to-instance' ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter
      SecurityGroupIngress:
      - IpProtocol: '-1'
        CidrIp: !Ref RemoteCidrForSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0

# Output of AWS services
Outputs:
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref Owner
  Project:
    Description: The project name
    Value: !Ref Project
  VPC:
    Description: Created VPC
    Value: !Ref VPC
  VPCCIDR:
    Description: VPC Subnet CIDR Block
    Value: !Ref VPCSubnetCidrBlock
  PublicRouteTable:
    Description: Public Route Table Created for VPC
    Value: !Ref PublicRouteTable
  PrivateRouteTable:
    Description: Private Route Table Created for VPC
    Value: !Ref PrivateRouteTable
  PublicSubnet1:
    Description: Public Subnet 1 Created for VPC
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 Created for VPC
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet 3 Created for VPC
    Value: !Ref PublicSubnet3
  PrivateSubnet1:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2 Created for VPC
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Description: Private Subnet 3 Created for VPC
    Value: !Ref PrivateSubnet3
  AvailabilityZone1:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet1.AvailabilityZone
  AvailabilityZone2:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet2.AvailabilityZone
  AvailabilityZone3:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PublicSubnet3.AvailabilityZone
  PublicSubnetCidr1:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock1
  PublicSubnetCidr2:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock2
  PublicSubnetCidr3:
    Description: Public Subnet IDs Created for VPC
    Value: !Ref PublicSubnetCidrBlock3
  PrivateSubnetCidr1:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock1
  PrivateSubnetCidr2:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock2
  PrivateSubnetCidr3:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock3
  InternetGateway:
    Description: Internet Gateway Created for VPC
    Value: !Ref InternetGateway
  InternalAccessSecurityGroup:
    Description: Instance to Instance Access within VPC
    Value: !Ref InternalAccessSecurityGroup
  RemoteAccessSecurityGroup:
    Description: Remote Network or IP that can Access the instances of VPN or Direct Connect.
    Value: !Ref RemoteAccessSecurityGroup
  DeleteAfter:
    Description: It is ok to delete this Formation after this date
    Value: !Ref DeleteAfter
  MinAutoScaleCount:
    Description: Minimum Instance Count.
    Value:
      Ref: MinAutoScaleCount
  MaxAutoScaleCount:
    Description: Maximum Instance Count.
    Value:
      Ref: MaxAutoScaleCount
  AsgSnsTopicArn:
    Description: ASG Alerts SNS Topic ARN Used.
    Value:
      Ref: AsgSnsTopicArn
  AMI:
    Description: AMI Used.
    Value:
      Ref: AMI
  OsType:
    Description: OS Type Selected.
    Value:
      Ref: OsType
  InstanceType:
    Description: Instance Type Used.
    Value:
      Ref: InstanceType
  KeyPairLoaded:
    Description: Key Pair Used.
    Value:
      Ref: Ec2KeyPair
  RemoteSecurityGroup:
    Description: Remote to Instance Access Security Group Selected.
    Value:
      Ref: RemoteSecurityGroup
  RDSAccessSecurityGroup:
    Description: RDS to Instance Access Security Group Selected.
    Value:
      Ref: RDSAccessSecurityGroup
  IAMRole:
    Description: IAM Instance Profile Role Created.
    Value:
      Ref: IamRole
  AutoScalingGroup:
    Description: Auto Scaling Group
    Value:
      Ref: AutoSCalingGroup
  PrivateSubnets:
    Description: Private Subnets Webapp ASG deployted
    Value:
      Fn::Join:
      - ''
      - - 'AZ1: '
        - Ref: PrivateSubnet1
        - ", "
        - 'AZ2: '
        - Ref: PrivateSubnet2
        - ", "
        - 'AZ3: '
        - Ref: PrivateSubnet3