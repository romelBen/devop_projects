version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}
  alert_manager: {}
  grafana: {}
  portainer_data:
  # Creates a volume to store the certificates. The constraint is to make sure traefik
  # always deploys to the same Docker node with the same volume containing the HTTPS certificates
  traefik-public-certificates:

# Uploads the files necessary for the configurement of Prometheus, Node Exporter
# and Alert Manager
configs:
  prom_rules:
    file: /home/romelben/plg-compose/prometheus/prometheus.yml
  alert_rules:
    file: /home/romelben/plg-compose/prometheus/alert.rules

networks:
  traefik-public:
    driver: overlay
    attachable: true # If network traefik-public has been created, use attachable = true to attach desired containers
    name: traefik-public
  monitor-hub:
    driver: overlay
    attachable: true # If network monitor-hub has been created, use attachable = true to attach desired containers
    name: monitor-hub

services:
# 1ST CONTAINER
  ### Traefik is a load balancer and HTTP reverse proxy that allows deploying microservices much easier
  ### when it comes to containerization. To the many clients it supports, here is documentation for
  ### containerization of Docker: https://doc.traefik.io/traefik/providers/docker/
  ### Here is general documentation on Traefik's command setup: https://doc.traefik.io/traefik/
  traefik:
    image: arm64v8/traefik
    networks:
      - traefik-public
    ports:
      # Use "mode: host" for Traefik to listen directly for the Client IP
      # which Traefik provides `X-Forwarded-For` or `X-Real-IP`
      - target: 80 # HTTP access
        published: 80
        mode: host
      - target: 443 # HTTPS access
        published: 443
        mode: host
    deploy:
      placement:
        constraints:
          # Make traefik run only on the node with this label
          # as the node with it has the volume for the certificate
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable traefik for this service, makes it available in the public network
        - traefik.enable=true
        # Use traefik-public network
        - traefik.docker.network=traefik-public
        # This public traefik will use services with this bale
        - traefik.constraint-label=traefik-public
        # Middleware HTTP Basic authentication
        # Using the environment variables USERNAME and HASHED_PASSWORD
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
        # Middleware to redirect HTTP to HTTPS traffic. (It can be re-used in other stack)
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`web.${DOMAIN}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # Here we route the traffic using HTTPS for traefik-https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`web.${DOMAIN}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special traefik service api@internal with the web UI/dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created
        - traefik.http.routers.traefik-public-https.middlwares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    command:
      # Enable Docker in traefik so that is can read labels from the Docker services
      - --providers.docker
      # Add a constraint to ONLY use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${EMAIL}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable access logs with HTTP requests
      - --accesslog
      # Enable the traefik log for configuration and errors
      - --log
      # Enable the dashboard and API
      - --api
      # Prometheus metrics exporter type
#      - --metrics.prometheus=true
      # Buckets for latency metrics
#      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    volumes:
      # Add Docker as a mounted volume so traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
      # Traefik configurations
#      - ./traefik.toml:/traefik.toml

# 2ND CONTAINER
  ### Grafana is a visual platform for monitoring data that is categorized by supported platforms
  ### The current services that are used are Prometheus, Node Exporter, and cAdvisor.
  ### In the future I would like to implement Promtail and Loki into Grafana to monitor logs in one
  ### holistic tool.
  grafana:
    image: grafana/grafana-arm64v8-linux
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - traefik-public
      - monitor-hub
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN}`)
        - traefik.http.routers.grafana-http.entrypoints=http
        - traefik.http.routers.grafana-http.middlewares=https-redirect
        - traefik.http.routers.grafana-https.rule=Host(`grafana.${DOMAIN}`)
        - traefik.http.routers.grafana-https.entrypoints=https
        - traefik.http.routers.grafana-https.tls=true
        - traefik.http.routers.grafana-https.tls.certresolver=le
        - traefik.http.services.grafana.loadbalancer.server.port=3000
      restart_policy:
        condition: on-failure